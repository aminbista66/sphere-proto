// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: codestore/codestore.proto

package codestore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodeStore_PullRepo_FullMethodName   = "/codestore.CodeStore/PullRepo"
	CodeStore_UploadCode_FullMethodName = "/codestore.CodeStore/UploadCode"
)

// CodeStoreClient is the client API for CodeStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeStoreClient interface {
	PullRepo(ctx context.Context, in *PullRepoRequest, opts ...grpc.CallOption) (*PullRepoResponse, error)
	UploadCode(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadCodeResponse], error)
}

type codeStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeStoreClient(cc grpc.ClientConnInterface) CodeStoreClient {
	return &codeStoreClient{cc}
}

func (c *codeStoreClient) PullRepo(ctx context.Context, in *PullRepoRequest, opts ...grpc.CallOption) (*PullRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullRepoResponse)
	err := c.cc.Invoke(ctx, CodeStore_PullRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeStoreClient) UploadCode(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadCodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CodeStore_ServiceDesc.Streams[0], CodeStore_UploadCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, UploadCodeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodeStore_UploadCodeClient = grpc.ClientStreamingClient[FileChunk, UploadCodeResponse]

// CodeStoreServer is the server API for CodeStore service.
// All implementations must embed UnimplementedCodeStoreServer
// for forward compatibility.
type CodeStoreServer interface {
	PullRepo(context.Context, *PullRepoRequest) (*PullRepoResponse, error)
	UploadCode(grpc.ClientStreamingServer[FileChunk, UploadCodeResponse]) error
	mustEmbedUnimplementedCodeStoreServer()
}

// UnimplementedCodeStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeStoreServer struct{}

func (UnimplementedCodeStoreServer) PullRepo(context.Context, *PullRepoRequest) (*PullRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullRepo not implemented")
}
func (UnimplementedCodeStoreServer) UploadCode(grpc.ClientStreamingServer[FileChunk, UploadCodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadCode not implemented")
}
func (UnimplementedCodeStoreServer) mustEmbedUnimplementedCodeStoreServer() {}
func (UnimplementedCodeStoreServer) testEmbeddedByValue()                   {}

// UnsafeCodeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeStoreServer will
// result in compilation errors.
type UnsafeCodeStoreServer interface {
	mustEmbedUnimplementedCodeStoreServer()
}

func RegisterCodeStoreServer(s grpc.ServiceRegistrar, srv CodeStoreServer) {
	// If the following call pancis, it indicates UnimplementedCodeStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeStore_ServiceDesc, srv)
}

func _CodeStore_PullRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeStoreServer).PullRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeStore_PullRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeStoreServer).PullRepo(ctx, req.(*PullRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeStore_UploadCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodeStoreServer).UploadCode(&grpc.GenericServerStream[FileChunk, UploadCodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodeStore_UploadCodeServer = grpc.ClientStreamingServer[FileChunk, UploadCodeResponse]

// CodeStore_ServiceDesc is the grpc.ServiceDesc for CodeStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codestore.CodeStore",
	HandlerType: (*CodeStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullRepo",
			Handler:    _CodeStore_PullRepo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadCode",
			Handler:       _CodeStore_UploadCode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "codestore/codestore.proto",
}
